%-----------------------------------------------------------------------------%
% vim: ft=mercury ts=4 sw=4 et
%-----------------------------------------------------------------------------%

:- module memory3.
:- interface.

:- import_module io.

:- pred main(io::di, io::uo) is cc_multi.

:- implementation.

:- import_module bool.
:- import_module int.
:- import_module list.
:- import_module pair.
:- import_module osi.
:- import_module string.
:- import_module thread.
:- import_module term.
:- import_module times.
:- import_module varset.

main(!IO) :-
    P = (pred(Cont::out, IO0::di, IO1::uo) is det :-
        some [!TIO] (
            IO0 = !:TIO,
            solve(!TIO),
            %thread_id(TID, !TIO),
            %format("solved %d\n", [i(TID)], !TIO),
            Cont = no,
            IO1 = !.TIO
        )
    ),
    repeat(1, spawn(loop(P)), !IO).


:- pred solve(io::di, io::uo) is det.

solve(!IO) :-
    constraints(VS, Cs),
    R = solve(Cs, min, [], VS),
    thread_id(TID, !IO),
    (   if      R = satisfiable(ObjVal, _)
        then    format("TID(%d) --> %f\n", [i(TID), f(ObjVal)], !IO)
        else    format("TID(%d) --> unsat\n", [i(TID)], !IO)
    ).


:- pred constraints(varset::out, list(constraint)::out) is det.

constraints(!:VS, Cs) :-
    init(!:VS),
    build_vars(1, 26, !VS, Vars),
    Var = (func(I) = det_index1(Vars, I)),
    Cs =
    [cstr([Var(25) - -1.0, Var(26) - 1.0], (=), 0.0)
    , cstr([Var(11) - 2.894800499969361, Var(17) - -2.894800499969361, Var(22) - -2.174192035967192, Var(25) - 2.174192035967192], (=<), 1.2260589999999998)
    , cstr([Var(11) - -2.894800499969361, Var(17) - 2.894800499969361, Var(22) - 2.174192035967192, Var(25) - -2.174192035967192], (=<), 2.773941)
    , cstr([Var(4) - -15.09, Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(17) - 0.20242417017533754, Var(22) - -0.1139445763399145, Var(25) - 0.1139445763399145, Var(26) - -5.710000000000001], (=<), -28.472394)
    , cstr([Var(24) - -1.0, Var(25) - 1.0], (>=), 0.0)
    , cstr([Var(11) - 2.894800499969361, Var(17) - -2.894800499969361, Var(22) - -2.174192035967192, Var(25) - 2.174192035967192], (=<), 1.2260589999999998)
    , cstr([Var(11) - -2.894800499969361, Var(17) - 2.894800499969361, Var(22) - 2.174192035967192, Var(25) - -2.174192035967192], (=<), 2.773941)
    , cstr([Var(23) - -1.0, Var(24) - 1.0], (>=), 0.0)
    , cstr([Var(24) - 1.0], (=), 12.632)
    , cstr([Var(4) - 15.09, Var(24) - -15.09], (=<), -103.74171247472444)
    , cstr([Var(4) - -15.09, Var(24) - 15.09], (=<), 108.51027152527556)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(17) - 0.20242417017533754, Var(22) - -0.1139445763399145, Var(24) - -20.686055423660086], (=<), -141.4986425004669)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(17) - -0.20242417017533754, Var(22) - 0.1139445763399145, Var(24) - 20.686055423660086], (=<), 150.97730349953312)
    , cstr([Var(11) - 2.894800499969361, Var(17) - -2.894800499969361, Var(22) - -2.174192035967192, Var(24) - 2.174192035967192], (=<), -4.683142900034605)
    , cstr([Var(11) - -2.894800499969361, Var(17) - 2.894800499969361, Var(22) - 2.174192035967192, Var(24) - -2.174192035967192], (=<), 5.097477099965395)
    , cstr([Var(22) - -1.0, Var(23) - 1.0], (>=), 0.0)
    , cstr([Var(23) - 1.0], (=), 12.132)
    , cstr([Var(4) - 15.09, Var(23) - -15.09], (=<), -96.20387047472443)
    , cstr([Var(4) - -15.09, Var(23) - 15.09], (=<), 100.97242952527554)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(17) - 0.20242417017533754, Var(22) - -0.1139445763399145, Var(23) - -20.686055423660086], (=<), -131.13139450046688)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(17) - -0.20242417017533754, Var(22) - 0.1139445763399145, Var(23) - 20.686055423660086], (=<), 140.6100554995331)
    , cstr([Var(11) - 2.894800499969361, Var(17) - -2.894800499969361, Var(22) - -2.174192035967192, Var(23) - 2.174192035967192], (=<), -5.667069900034606)
    , cstr([Var(11) - -2.894800499969361, Var(17) - 2.894800499969361, Var(22) - 2.174192035967192, Var(23) - -2.174192035967192], (=<), 6.081404099965395)
    , cstr([Var(21) - -1.0, Var(22) - 1.0], (>=), 0.0)
    , cstr([Var(11) - 2.894800499969361, Var(17) - -2.894800499969361], (=<), -3.773941)
    , cstr([Var(11) - -2.894800499969361, Var(17) - 2.894800499969361], (=<), 7.773941000000001)
    , cstr([Var(20) - -1.0, Var(21) - 1.0], (>=), 0.0)
    , cstr([Var(21) - 1.0], (=), 11.632)
    , cstr([Var(4) - 15.09, Var(21) - -15.09], (=<), -88.66602847472444)
    , cstr([Var(4) - -15.09, Var(21) - 15.09], (=<), 93.43458752527556)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(17) - 0.20242417017533754, Var(21) - -20.8], (=<), -120.69017050046692)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(17) - -0.20242417017533754, Var(21) - 20.8], (=<), 130.16883149953313)
    , cstr([Var(11) - 2.894800499969361, Var(17) - -2.894800499969361], (=<), -5.040538574012645)
    , cstr([Var(11) - -2.894800499969361, Var(17) - 2.894800499969361], (=<), 7.087745425987356)
    , cstr([Var(19) - -1.0, Var(20) - 1.0], (>=), 0.0)
    , cstr([Var(20) - 1.0], (=), 11.132)
    , cstr([Var(4) - 15.09, Var(20) - -15.09], (=<), -81.12818647472444)
    , cstr([Var(4) - -15.09, Var(20) - 15.09], (=<), 85.89674552527556)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(17) - 0.20242417017533754, Var(20) - -20.8], (=<), -110.24083050046691)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(17) - -0.20242417017533754, Var(20) - 20.8], (=<), 119.7194914995331)
    , cstr([Var(11) - 2.894800499969361, Var(17) - -2.894800499969361], (=<), -5.1744495740126455)
    , cstr([Var(11) - -2.894800499969361, Var(17) - 2.894800499969361], (=<), 7.221656425987355)
    , cstr([Var(18) - -1.0, Var(19) - 1.0], (>=), 0.0)
    , cstr([Var(4) - -15.09, Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(17) - 0.20242417017533754, Var(19) - -5.710000000000001], (=<), -28.472394)
    , cstr([Var(17) - -1.0, Var(18) - 1.0], (>=), 0.0)
    , cstr([Var(18) - 1.0], (=), 10.632)
    , cstr([Var(4) - 15.09, Var(18) - -15.09], (=<), -73.59034547472444)
    , cstr([Var(4) - -15.09, Var(18) - 15.09], (=<), 78.35890452527556)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(17) - 0.20242417017533754, Var(18) - -20.8], (=<), -99.79264950046691)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(17) - -0.20242417017533754, Var(18) - 20.8], (=<), 109.2713104995331)
    , cstr([Var(11) - 2.894800499969361, Var(17) - -2.894800499969361], (=<), -5.253116574012645)
    , cstr([Var(11) - -2.894800499969361, Var(17) - 2.894800499969361], (=<), 7.300323425987354)
    , cstr([Var(16) - -1.0, Var(17) - 1.0], (>=), 0.0)
    , cstr([Var(11) - 2.894800499969361, Var(17) - -2.894800499969361], (=<), -3.773941)
    , cstr([Var(11) - -2.894800499969361, Var(17) - 2.894800499969361], (=<), 7.773941000000001)
    , cstr([Var(15) - -1.0, Var(16) - 1.0], (>=), 0.0)
    , cstr([Var(16) - 1.0], (=), 10.132)
    , cstr([Var(4) - 15.09, Var(16) - -15.09], (=<), -66.05250347472443)
    , cstr([Var(4) - -15.09, Var(16) - 15.09], (=<), 70.82106252527555)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(16) - -20.597575829824663], (=<), -89.3467875004669)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(16) - 20.597575829824663], (=<), 98.8254484995331)
    , cstr([Var(11) - 2.894800499969361, Var(16) - -2.894800499969361], (=<), -3.799738)
    , cstr([Var(11) - -2.894800499969361, Var(16) - 2.894800499969361], (=<), 8.799738)
    , cstr([Var(14) - -1.0, Var(15) - 1.0], (>=), 0.0)
    , cstr([Var(15) - 1.0], (=), 9.632)
    , cstr([Var(4) - 15.09, Var(15) - -15.09], (=<), -58.514661474724434)
    , cstr([Var(4) - -15.09, Var(15) - 15.09], (=<), 63.28322052527555)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(15) - -20.597575829824663], (=<), -78.8965155004669)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(15) - 20.597575829824663], (=<), 88.3751764995331)
    , cstr([Var(11) - 2.894800499969361, Var(15) - -2.894800499969361], (=<), -3.7656080000000003)
    , cstr([Var(11) - -2.894800499969361, Var(15) - 2.894800499969361], (=<), 8.765608)
    , cstr([Var(13) - -1.0, Var(14) - 1.0], (>=), 0.0)
    , cstr([Var(14) - 1.0], (=), 9.132)
    , cstr([Var(4) - 15.09, Var(14) - -15.09], (=<), -50.976865474724434)
    , cstr([Var(4) - -15.09, Var(14) - 15.09], (=<), 55.74542452527555)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(14) - -20.597575829824663], (=<), -68.44995150046691)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(14) - 20.597575829824663], (=<), 77.9286124995331)
    , cstr([Var(11) - 2.894800499969361, Var(14) - -2.894800499969361], (=<), -3.675508)
    , cstr([Var(11) - -2.894800499969361, Var(14) - 2.894800499969361], (=<), 8.675508)
    , cstr([Var(12) - -1.0, Var(13) - 1.0], (>=), 0.0)
    , cstr([Var(13) - 1.0], (=), 8.632)
    , cstr([Var(4) - 15.09, Var(13) - -15.09], (=<), -43.43899347472444)
    , cstr([Var(4) - -15.09, Var(13) - 15.09], (=<), 48.20755252527556)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(13) - -20.597575829824663], (=<), -58.0861365004669)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(13) - 20.597575829824663], (=<), 67.5647974995331)
    , cstr([Var(11) - 2.894800499969361, Var(13) - -2.894800499969361], (=<), -2.654928)
    , cstr([Var(11) - -2.894800499969361, Var(13) - 2.894800499969361], (=<), 7.654928)
    , cstr([Var(11) - -1.0, Var(12) - 1.0], (>=), 0.0)
    , cstr([Var(12) - 1.0], (=), 8.132)
    , cstr([Var(4) - 15.09, Var(12) - -15.09], (=<), -35.901120474724436)
    , cstr([Var(4) - -15.09, Var(12) - 15.09], (=<), 40.669679525275555)
    , cstr([Var(6) - 20.8, Var(11) - -0.20242417017533754, Var(12) - -20.597575829824663], (=<), -48.0636065004669)
    , cstr([Var(6) - -20.8, Var(11) - 0.20242417017533754, Var(12) - 20.597575829824663], (=<), 57.5422674995331)
    , cstr([Var(11) - 2.894800499969361, Var(12) - -2.894800499969361], (=<), 0.2911030000000001)
    , cstr([Var(11) - -2.894800499969361, Var(12) - 2.894800499969361], (=<), 4.708897)
    , cstr([Var(10) - -1.0, Var(11) - 1.0], (>=), 0.0)
    , cstr([Var(9) - -1.0, Var(10) - 1.0], (>=), 0.0)
    , cstr([Var(10) - 1.0], (=), 7.618)
    , cstr([Var(4) - 15.09, Var(10) - -15.09], (=<), -28.152249474724442)
    , cstr([Var(4) - -15.09, Var(10) - 15.09], (=<), 32.92080852527556)
    , cstr([Var(6) - 20.8, Var(10) - -20.8], (=<), -37.584789500466904)
    , cstr([Var(6) - -20.8, Var(10) - 20.8], (=<), 47.0634504995331)
    , cstr([Var(8) - -1.0, Var(9) - 1.0], (>=), 0.0)
    , cstr([Var(9) - 1.0], (=), 7.112)
    , cstr([Var(4) - 15.09, Var(9) - -15.09], (=<), -20.52116547472444)
    , cstr([Var(4) - -15.09, Var(9) - 15.09], (=<), 25.28972452527556)
    , cstr([Var(6) - 20.8, Var(9) - -20.8], (=<), -26.999802500466906)
    , cstr([Var(6) - -20.8, Var(9) - 20.8], (=<), 36.4784634995331)
    , cstr([Var(7) - -1.0, Var(8) - 1.0], (>=), 0.0)
    , cstr([Var(8) - 1.0], (=), 6.606)
    , cstr([Var(4) - 15.09, Var(8) - -15.09], (=<), -12.885171474724437)
    , cstr([Var(4) - -15.09, Var(8) - 15.09], (=<), 17.653730525275556)
    , cstr([Var(6) - 20.8, Var(8) - -20.8], (=<), -16.421732500466902)
    , cstr([Var(6) - -20.8, Var(8) - 20.8], (=<), 25.900393499533095)
    , cstr([Var(6) - -1.0, Var(7) - 1.0], (>=), 0.0)
    , cstr([Var(7) - 1.0], (=), 6.1)
    , cstr([Var(4) - 15.09, Var(7) - -15.09], (=<), -5.249147474724438)
    , cstr([Var(4) - -15.09, Var(7) - 15.09], (=<), 10.017706525275557)
    , cstr([Var(6) - 20.8, Var(7) - -20.8], (=<), -5.8428795004669025)
    , cstr([Var(6) - -20.8, Var(7) - 20.8], (=<), 15.3215404995331)
    , cstr([Var(5) - -1.0, Var(6) - 1.0], (>=), 0.0)
    , cstr([Var(4) - -1.0, Var(5) - 1.0], (>=), 0.0)
    , cstr([Var(3) - -1.0, Var(4) - 1.0], (>=), 0.0)
    , cstr([Var(2) - -1.0, Var(3) - 1.0], (>=), 0.0)
    , cstr([Var(1) - -1.0, Var(2) - 1.0], (=), 0.0)
    , cstr([Var(1) - 1.0], (>=), 5.594)
    , cstr([Var(1) - 1.0], (=), 5.594)].


:- pred build_vars(int::in, int::in,
                   varset::in, varset::out, list(var)::out) is det.

build_vars(Lo, Hi, !VS, Vars) :-
    if      Lo =< Hi
    then    new_var(V, !VS),
            Vars = [V | Vars0],
            build_vars(Lo + 1, Hi, !VS, Vars0)
    else    Vars = [].
    



:- pred loop(pred(bool, io, io)::in(pred(out, di, uo) is det),
             io::di, io::uo) is cc_multi.

loop(P, !IO) :- P(Cont, !IO), ( if Cont = yes then loop(P, !IO) else true ).


:- pred repeat(int::in,
               pred(io, io)::in(pred(di, uo) is cc_multi),
               io::di, io::uo) is cc_multi.

repeat(N, G, !IO) :-
    if      N > 0
    then    G(!IO),
            repeat(N-1, G, !IO)
    else    true.

%-----------------------------------------------------------------------------%
:- end_module memory3.
%-----------------------------------------------------------------------------%
